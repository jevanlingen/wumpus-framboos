openapi: "3.1.0"
info:
  title: "Wumpus Game"
  description: "API to interact with the Wumpus World."
  version: "1.0.0"
paths:
  /create-account:
    post:
      tags:
        - Account
      description: "Create a new user account."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
        required: true
      responses:
        "201":
          description: "The new user account has been created."
          content:
            '*/*':
              schema:
                type: "object"
  /competitions/{id}:
    get:
      tags:
        - Competitions
      security:
        - basicAuth: []
      description: "Retrieve details of a specific competition by its ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Details of the competition."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Competition"
  /competitions/ids:
    get:
      tags:
        - Competitions
      security:
        - basicAuth: []
      description: "Retrieve a list of all competition IDs."
      responses:
        "200":
          description: "A list of competition IDs."
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int32"
  /games/{id}:
    get:
      tags:
        - Games
      security:
        - basicAuth: []
      description: "Retrieve details of a specific game by its ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Details of the game."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Game"
  /games/{id}/action/{action}:
    post:
      tags:
        - Games
      security:
        - basicAuth: []
      description: "Perform an action in a specific game."
      parameters:
        - name: "action"
          in: "path"
          required: true
          schema:
            $ref: '#/components/schemas/Action'
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Action performed successfully."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Player"
  /games/ids:
    get:
      tags:
        - Games
      security:
        - basicAuth: []
      description: "Retrieve a list of all game IDs."
      responses:
        "200":
          description: "A list of game IDs."
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int32"
  /competitions:
    post:
      tags:
        - Competitions
      security:
        - basicAuth: []
      description: "Create a new competition."
      responses:
        "200":
          description: "The new competition has been created."
          content:
            '*/*':
              schema:
                type: "object"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Action:
      type: string
      enum:
        - enter
        - restart
        - turn-left
        - turn-right
        - move-forward
        - grab
        - shoot
        - climb
    Competition:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        currentGameId:
          type: "integer"
          format: "int32"
        gameIds:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      required:
        - "gameIds"
    CreateUser:
      type: "object"
      properties:
        name:
          type: "string"
        password:
          type: "string"
      required:
        - "name"
    Game:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        gridSize:
          type: "integer"
          format: "int32"
        pits:
          type: "integer"
          format: "int32"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        password:
          type: "string"
        admin:
          type: "boolean"
        shirtColor:
          type: "string"
        trouserColor:
          type: "string"
        skinColor:
          type: "string"
      required:
        - "name"
        - "shirtColor"
        - "trouserColor"
        - "skinColor"
    Coordinate:
      type: "object"
      properties:
        x:
          type: "integer"
          format: "int32"
        "y":
          type: "integer"
          format: "int32"
    Player:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        user:
          $ref: "#/components/schemas/User"
        gameId:
          type: "integer"
          format: "int32"
        direction:
          type: "string"
          enum:
            - "NORTH"
            - "EAST"
            - "SOUTH"
            - "WEST"
        perceptions:
          type: "array"
          items:
            type: "string"
            enum:
              - "STENCH"
              - "BREEZE"
              - "GLITTER"
              - "BUMP"
              - "SCREAM"
              - "LADDER"
        coordinate:
          $ref: "#/components/schemas/Coordinate"
        points:
          type: "integer"
          format: "int32"
        arrows:
          type: "integer"
          format: "int32"
        planks:
          type: "integer"
          format: "int32"
        wumpusAlive:
          type: "boolean"
        hasTreasure:
          type: "boolean"
        gameCompleted:
          type: "boolean"
        death:
          type: "boolean"
      required:
        - "direction"
        - "perceptions"
        - "coordinate"
